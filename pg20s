#include <stdio.h>
#include <stdlib.h>

// Define the structure for a term in a polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term with the given coefficient and exponent
struct Term* createTerm(int coefficient, int exponent) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}

// Function to insert a term into a polynomial in decreasing order of exponent
struct Term* insertTerm(struct Term* head, int coefficient, int exponent) {
    struct Term* newTerm = createTerm(coefficient, exponent);

    // Insert at the beginning if the polynomial is empty or has a lower exponent
    if (head == NULL || exponent > head->exponent) {
        newTerm->next = head;
        return newTerm;
    }

    // Find the correct position to insert the term
    struct Term* current = head;
    while (current->next != NULL && exponent < current->next->exponent) {
        current = current->next;
    }

    // Insert the term
    newTerm->next = current->next;
    current->next = newTerm;

    return head;
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            result = insertTerm(result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            result = insertTerm(result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            // Exponents are equal, add coefficients
            int sumCoeff = poly1->coefficient + poly2->coefficient;
            result = insertTerm(result, sumCoeff, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add remaining terms
    while (poly1 != NULL) {
        result = insertTerm(result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    while (poly2 != NULL) {
        result = insertTerm(result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to multiply two polynomials
struct Term* multiplyPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;

    // Multiply each term of poly1 with each term of poly2
    while (poly1 != NULL) {
        struct Term* tempPoly2 = poly2;
        while (tempPoly2 != NULL) {
            int productCoeff = poly1->coefficient * tempPoly2->coefficient;
            int productExponent = poly1->exponent + tempPoly2->exponent;
            result = insertTerm(result, productCoeff, productExponent);
            tempPoly2 = tempPoly2->next;
        }
        poly1 = poly1->next;
    }

    return result;
}

// Function to display a polynomial
void displayPolynomial(struct Term* poly) {
    while (poly != NULL) {
        printf("%dx^%d", poly->coefficient, poly->exponent);
        if (poly->next != NULL) {
            printf(" + ");
        }
        poly = poly->next;
    }
    printf("\n");
}

// Function to free the memory allocated for a polynomial
void freePolynomial(struct Term* poly) {
    struct Term* temp;
    while (poly != NULL) {
        temp = poly;
        poly = poly->next;
        free(temp);
    }
}

int main() {
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    struct Term* result = NULL;

    int n1, n2, coeff, exp;

    // Get the number of terms and input for the first polynomial
    printf("Enter the number of terms in the first polynomial: ");
    scanf("%d", &n1);
    printf("Enter the coefficients and exponents for the first polynomial:\n");
    for (int i = 0; i < n1; i++) {
        scanf("%d %d", &coeff, &exp);
        poly1 = insertTerm(poly1, coeff, exp);
    }

    // Get the number of terms and input for the second polynomial
    printf("Enter the number of terms in the second polynomial: ");
    scanf("%d", &n2);
    printf("Enter the coefficients and exponents for the second polynomial:\n");
    for (int i = 0; i < n2; i++) {
        scanf("%d %d", &coeff, &exp);
        poly2 = insertTerm(poly2, coeff, exp);
    }

    // Display the input polynomials
    printf("\nInput Polynomials:\n");
    printf("First Polynomial: ");
    displayPolynomial(poly1);
    printf("Second Polynomial: ");
    displayPolynomial(poly2);

    // Add the polynomials
    result = addPolynomials(poly1, poly2);
    printf("\nAddition Result:\n");
    displayPolynomial(result);

    // Free the memory allocated for the result polynomial
    freePolynomial(result);

    // Multiply the polynomials
    result = multiplyPolynomials(poly1, poly2);
    printf("\nMultiplication Result:\n");
    displayPolynomial(result);

    // Free the memory allocated for the polynomials
    freePolynomial(poly1);
    freePolynomial(poly2);
    freePolynomial(result);

    return 0;
}
