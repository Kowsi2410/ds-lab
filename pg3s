#include <stdio.h>
#include <stdlib.h>

// Define a structure for the stack
struct Stack {
    int top;
    unsigned capacity;
    char* array;
};

// Function to create a stack of given capacity
struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->top = -1;
    stack->capacity = capacity;
    stack->array = (char*)malloc(stack->capacity * sizeof(char));
    return stack;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, char item) {
    stack->array[++stack->top] = item;
}

// Function to pop an element from the stack
char pop(struct Stack* stack) {
    if (!isEmpty(stack))
        return stack->array[stack->top--];
    return '\0';
}

// Function to check if the given expression has balanced parentheses
int isBalanced(char expression[]) {
    struct Stack* stack = createStack(strlen(expression));

    for (int i = 0; expression[i]; i++) {
        if (expression[i] == '(' || expression[i] == '{' || expression[i] == '[')
            push(stack, expression[i]);
        else if (expression[i] == ')' || expression[i] == '}' || expression[i] == ']') {
            if (isEmpty(stack))
                return 0; // Unbalanced expression
            char popped = pop(stack);
            if ((expression[i] == ')' && popped != '(') ||
                (expression[i] == '}' && popped != '{') ||
                (expression[i] == ']' && popped != '['))
                return 0; // Unbalanced expression
        }
    }

    return isEmpty(stack); // If stack is empty, expression is balanced
}

int main() {
    char expression[100];
    printf("Enter an expression: ");
    fgets(expression, sizeof(expression), stdin);

    if (isBalanced(expression))
        printf("The expression is balanced.\n");
    else
        printf("The expression is not balanced.\n");

    return 0;
}
