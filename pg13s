#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

// Queue structure for BFS
struct Queue {
    int items[MAX_NODES];
    int front;
    int rear;
};

// Graph structure
struct Graph {
    int vertices;
    int adjacencyMatrix[MAX_NODES][MAX_NODES];
};

// Function to initialize a queue
void initializeQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is empty
int isEmpty(struct Queue* q) {
    return q->front == -1;
}

// Function to enqueue an element
void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX_NODES - 1) {
        printf("Queue is full!\n");
    } else {
        if (q->front == -1) {
            q->front = 0;
        }
        q->rear++;
        q->items[q->rear] = value;
    }
}

// Function to dequeue an element
int dequeue(struct Queue* q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        item = -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            q->front = q->rear = -1;
        }
    }
    return item;
}

// Function to add an edge to the graph
void addEdge(struct Graph* g, int start, int end) {
    g->adjacencyMatrix[start][end] = 1;
    g->adjacencyMatrix[end][start] = 1;
}

// Function to perform BFS traversal
void bfs(struct Graph* g, int startNode) {
    struct Queue q;
    initializeQueue(&q);

    int visited[MAX_NODES] = {0};
    printf("BFS Traversal starting from node %d: ", startNode);

    visited[startNode] = 1;
    printf("%d ", startNode);
    enqueue(&q, startNode);

    while (!isEmpty(&q)) {
        int currentNode = dequeue(&q);

        for (int i = 0; i < g->vertices; ++i) {
            if (g->adjacencyMatrix[currentNode][i] == 1 && !visited[i]) {
                visited[i] = 1;
                printf("%d ", i);
                enqueue(&q, i);
            }
        }
    }

    printf("\n");
}

int main() {
    struct Graph graph;
    int numNodes, startNode, endNode;

    printf("Enter the number of nodes in the graph: ");
    scanf("%d", &numNodes);

    graph.vertices = numNodes;

    // Initialize the adjacency matrix
    for (int i = 0; i < numNodes; ++i) {
        for (int j = 0; j < numNodes; ++j) {
            graph.adjacencyMatrix[i][j] = 0;
        }
    }

    // Get edges from the user
    printf("Enter edges (node pairs) as (-1 -1 to end):\n");
    while (1) {
        printf("Enter edge (start end): ");
        scanf("%d %d", &startNode, &endNode);

        if (startNode == -1 && endNode == -1) {
            break;
        }

        if (startNode < 0 || startNode >= numNodes || endNode < 0 || endNode >= numNodes) {
            printf("Invalid node! Please enter valid nodes.\n");
            continue;
        }

        addEdge(&graph, startNode, endNode);
    }

    // Get the starting node for BFS
    printf("Enter the starting node for BFS traversal: ");
    scanf("%d", &startNode);

    if (startNode < 0 || startNode >= numNodes) {
        printf("Invalid starting node! Please enter a valid node.\n");
        return 1;
    }

    // Perform BFS traversal
    bfs(&graph, startNode);

    return 0;
}
