#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void append(struct Node** head, int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head;
    new_node->data = data;
    new_node->next = NULL;

    if (*head == NULL) {
        *head = new_node;
        return;
    }

    while (last->next != NULL) {
        last = last->next;
    }

    last->next = new_node;
}

// Function to print elements at odd positions
void printOddPositionElements(struct Node* head) {
    int position = 1;
    while (head != NULL) {
        if (position % 2 != 0) {
            printf("%d ", head->data);
        }
        position++;
        head = head->next;
    }
    printf("\n");
}

// Function to free the allocated memory for the linked list
void freeList(struct Node** head) {
    struct Node* current = *head;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }

    *head = NULL;
}

// Main function to test the linked list and print odd position elements
int main() {
    struct Node* head = NULL;

    // Appending elements to the linked list
    append(&head, 1);
    append(&head, 2);
    append(&head, 3);
    append(&head, 4);
    append(&head, 5);

    // Printing odd position elements
    printf("Odd Position Elements: ");
    printOddPositionElements(head);

    // Freeing allocated memory
    freeList(&head);

    return 0;
}
