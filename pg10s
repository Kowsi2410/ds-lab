#include <stdio.h>
#include <stdlib.h>

// Define the structure for an AVL tree node
struct AVLNode {
    int data;
    struct AVLNode* left;
    struct AVLNode* right;
    int height; // Height of the node
};

// Function to calculate the height of a node
int getHeight(struct AVLNode* node) {
    if (node == NULL) {
        return 0;
    }
    return node->height;
}

// Function to calculate the balance factor of a node
int getBalanceFactor(struct AVLNode* node) {
    if (node == NULL) {
        return 0;
    }
    return getHeight(node->left) - getHeight(node->right);
}

// Function to create a new AVL tree node with the given data
struct AVLNode* createNode(int data) {
    struct AVLNode* newNode = (struct AVLNode*)malloc(sizeof(struct AVLNode));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    newNode->height = 1; // New node is initially at height 1
    return newNode;
}

// Function to right rotate a subtree rooted with y
struct AVLNode* rightRotate(struct AVLNode* y) {
    struct AVLNode* x = y->left;
    struct AVLNode* T2 = x->right;

    // Perform rotation
    x->right = y;
    y->left = T2;

    // Update heights
    y->height = 1 + fmax(getHeight(y->left), getHeight(y->right));
    x->height = 1 + fmax(getHeight(x->left), getHeight(x->right));

    // Return new root
    return x;
}

// Function to left rotate a subtree rooted with x
struct AVLNode* leftRotate(struct AVLNode* x) {
    struct AVLNode* y = x->right;
    struct AVLNode* T2 = y->left;

    // Perform rotation
    y->left = x;
    x->right = T2;

    // Update heights
    x->height = 1 + fmax(getHeight(x->left), getHeight(x->right));
    y->height = 1 + fmax(getHeight(y->left), getHeight(y->right));

    // Return new root
    return y;
}

// Function to insert a node into the AVL tree
struct AVLNode* insertNode(struct AVLNode* root, int data) {
    // Perform standard BST insertion
    if (root == NULL) {
        return createNode(data);
    }

    if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data);
    } else {
        // Duplicate data is not allowed in AVL tree
        return root;
    }

    // Update height of the current node
    root->height = 1 + fmax(getHeight(root->left), getHeight(root->right));

    // Get the balance factor to check if the node became unbalanced
    int balance = getBalanceFactor(root);

    // Left Left Case
    if (balance > 1 && data < root->left->data) {
        return rightRotate(root);
    }

    // Right Right Case
    if (balance < -1 && data > root->right->data) {
        return leftRotate(root);
    }

    // Left Right Case
    if (balance > 1 && data > root->left->data) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Right Left Case
    if (balance < -1 && data < root->right->data) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    // If the node is balanced, return the unchanged node
    return root;
}

// Function to perform inorder traversal of the AVL tree
void inorderTraversal(struct AVLNode* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Function to free the memory allocated for the AVL tree
void freeAVLTree(struct AVLNode* root) {
    if (root != NULL) {
        freeAVLTree(root->left);
        freeAVLTree(root->right);
        free(root);
    }
}

int main() {
    struct AVLNode* root = NULL;
    int n, data;

    // Get the number of nodes in the AVL tree
    printf("Enter the number of nodes in the AVL tree: ");
    scanf("%d", &n);

    // Get input values from the user and insert them into the AVL tree
    printf("Enter the values for the nodes:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        root = insertNode(root, data);
    }

    // Perform inorder traversal
    printf("Inorder traversal of AVL tree: ");
    inorderTraversal(root);
    printf("\n");

    // Free the memory allocated for the AVL tree
    freeAVLTree(root);

    return 0;
}
