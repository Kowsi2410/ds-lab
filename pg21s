#include <stdio.h>
#include <stdlib.h>

// Define the structure for a singly linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node with the given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the linked list
struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;
    }

    struct Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
    return head;
}

// Function to find and remove the middle element from the linked list
struct Node* removeMiddle(struct Node* head) {
    if (head == NULL || head->next == NULL) {
        // The list is empty or has only one element, no middle to remove
        return NULL;
    }

    struct Node* slow = head;
    struct Node* fast = head;
    struct Node* prev = NULL;

    // Use the slow and fast pointers to find the middle element
    while (fast != NULL && fast->next != NULL) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }

    // Remove the middle element by adjusting pointers
    if (prev != NULL) {
        prev->next = slow->next;
        free(slow);
    } else {
        // If the list has only two elements, remove the head
        head = head->next;
        free(slow);
    }

    return head;
}

// Function to display the linked list
void displayList(struct Node* head) {
    printf("Linked List: ");
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

// Function to free the memory allocated for the linked list
void freeList(struct Node* head) {
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    struct Node* head = NULL;
    int n, data;

    // Get the number of nodes in the linked list
    printf("Enter the number of nodes in the linked list: ");
    scanf("%d", &n);

    // Get input values from the user and insert them into the linked list
    printf("Enter the values for the nodes:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &data);
        head = insertAtEnd(head, data);
    }

    // Display the original linked list
    displayList(head);

    // Remove the middle element if the list has an odd number of elements
    head = removeMiddle(head);

    // Display the updated linked list
    printf("Linked list after removing the middle element: ");
    displayList(head);

    // Free the memory allocated for the linked list
    freeList(head);

    return 0;
}
