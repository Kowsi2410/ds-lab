#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the linked list
struct Node {
    int data;
    int priority;
    struct Node* next;
};

// Define a structure for the priority queue
struct PriorityQueue {
    struct Node* front;
};

// Function to create a new node with the given data and priority
struct Node* createNode(int data, int priority) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->priority = priority;
    newNode->next = NULL;
    return newNode;
}

// Function to initialize an empty priority queue
void initializePriorityQueue(struct PriorityQueue* pq) {
    pq->front = NULL;
}

// Function to check if the priority queue is empty
int isEmpty(struct PriorityQueue* pq) {
    return (pq->front == NULL);
}

// Function to enqueue a new element into the priority queue
void enqueue(struct PriorityQueue* pq, int data, int priority) {
    struct Node* newNode = createNode(data, priority);
    
    if (isEmpty(pq) || priority < pq->front->priority) {
        newNode->next = pq->front;
        pq->front = newNode;
    } else {
        struct Node* current = pq->front;
        while (current->next != NULL && current->next->priority <= priority) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
    }
    
    printf("Enqueued %d with priority %d\n", data, priority);
}

// Function to dequeue an element from the priority queue
void dequeue(struct PriorityQueue* pq) {
    if (isEmpty(pq)) {
        printf("Priority queue is empty. Cannot dequeue.\n");
    } else {
        struct Node* temp = pq->front;
        int data = temp->data;
        pq->front = temp->next;
        free(temp);
        printf("Dequeued %d\n", data);
    }
}

// Function to display the elements in the priority queue
void displayPriorityQueue(struct PriorityQueue* pq) {
    if (isEmpty(pq)) {
        printf("Priority queue is empty.\n");
    } else {
        printf("Priority Queue: ");
        struct Node* current = pq->front;
        while (current != NULL) {
            printf("(%d, %d) ", current->data, current->priority);
            current = current->next;
        }
        printf("\n");
    }
}

int main() {
    struct PriorityQueue pq;
    initializePriorityQueue(&pq);

    int choice, data, priority;

    do {
        printf("\nPriority Queue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to enqueue: ");
                scanf("%d", &data);
                printf("Enter priority: ");
                scanf("%d", &priority);
                enqueue(&pq, data, priority);
                break;
            case 2:
                dequeue(&pq);
                break;
            case 3:
                displayPriorityQueue(&pq);
                break;
            case 4:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 4);

    return 0;
}
