#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Node structure for adjacency list
struct Node {
int vertex;
struct Node* next;
};

// Graph structure
struct Graph {
struct Node* adjacencyList[MAX_VERTICES];
};

// Function to create a new node
struct Node* createNode(int vertex) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
if (newNode == NULL) {
printf("Memory allocation error\n");
exit(EXIT_FAILURE);
}
newNode->vertex = vertex;
newNode->next = NULL;
return newNode;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest) {
// Add an edge from src to dest
struct Node* newNode = createNode(dest);
newNode->next = graph->adjacencyList[src];
graph->adjacencyList[src] = newNode;

// Uncomment the following lines if the graph is undirected
/*
// Add an edge from dest to src
newNode = createNode(src);
newNode->next = graph->adjacencyList[dest];
graph->adjacencyList[dest] = newNode;
*/
}

// Function to perform Depth-First Search (DFS)

void DFS(struct Graph* graph, int vertex, int visited[]) {
visited[vertex] = 1;
printf("%d ", vertex);

struct Node* current = graph->adjacencyList[vertex];
while (current != NULL) {
if (!visited[current->vertex]) {
DFS(graph, current->vertex, visited);
}
current = current->next;
}
}

int main() {
struct Graph myGraph;
int visited[MAX_VERTICES] = {0};

// Initialize the graph
for (int i = 0; i < MAX_VERTICES; ++i) {
myGraph.adjacencyList[i] = NULL;
}

// Add edges to the graph
addEdge(&myGraph, 0, 1);
addEdge(&myGraph, 0, 2);
addEdge(&myGraph, 1, 3);
addEdge(&myGraph, 1, 4);
addEdge(&myGraph, 2, 5);

printf("Depth-First Search (DFS): ");
DFS(&myGraph, 0, visited);
printf("\n");

return 0;
